#!/usr/bin/env bash
#
# template
#
# This is a template for bash scripts
#
# Author: Emanuel Duss
#

set -o errexit
set -o nounset
set -o pipefail

_red="$(tput setaf 1)"
_green="$(tput setaf 2)"
_yellow="$(tput setaf 3)"
_blue="$(tput setaf 4)"
_orange="$(tput setaf 6)"
_bold="$(tput bold)"
_reset="$(tput sgr0)"

print_usage(){
cat << EOI
Usage: template  [OPTION ...]

Program:
  This is just a template

Options:
  -a    Option alice            (default: alice)
EOI
}

check_dependencies(){
  local fail=0
  for command in "$@"
  do
    if ! hash "$command" &> /dev/null
    then
      echo_error "Command \"$command\" not found."
      fail=1
    fi
  done
  [[ "$fail" == 1 ]] && exit 1
}

echo_debug(){ echo "${_blue}[+] ${*}${_reset}" >&2; }
echo_info(){ echo "${_green}[*] ${*}${_reset}" >&2; }
echo_warning(){ echo "${_yellow}[!] ${*}${_reset}" >&2; }
echo_error(){ echo "${_red}[#] ${*}${_reset}" >&2; }

parse_arguments(){
  ALICE="alice"

  while getopts ab: name
  do
    case $name
    in
      a)
        ${ALICE}="${OPTARG}"
      ;;
      h)
        print_usage
        exit
      ;;
      ?)
        print_usage >&2
        exit 1
      ;;
    esac
  done
}

check_preconditions(){
  if [[ "$UID" != 0 ]]
  then
    echo_error "Program must be run as root."
    ABORT=1
    exit 1
  fi
}

# Always run exit_trap; only run exit_cleanup when set to 1
CLEANUP="0"
enable_cleanup(){ CLEANUP="1"; }

exit_trap(){
  echo
  echo_info "Stopping ..."

  [[ "${CLEANUP}" == "1" ]] && exit_cleanup
}
trap exit_trap EXIT

cleanup(){
  echo_info "Other stuff to clean up..."
}
trap cleanup EXIT

log(){
  echo "[*] $(date +"%F %T"): $@"
}

do_stuff(){
  foo="${1:-foo}"
  echo "[OK] Foo is: $foo"
  echo "Haloo $DATETIME"

  echo_debug "This is a debug message. ($DATETIME)"
  echo_info "This is an info message."
  echo_warning "This is a warning message."
  sleep 1
  echo_error "This is an error message. ($DATETIME)"
}

main(){
  check_dependencies jhead exiftool

  parse_arguments "$@"
  shift $((OPTIND - 1))
  echo "Remaining arguments: $@"

  check_preconditions
  enable_cleanup

  if [[ -z "${1:-}" ]]
  then
    echo "\$1 is not set"
  fi

  do_stuff 1 2 3
}

main "$@"
